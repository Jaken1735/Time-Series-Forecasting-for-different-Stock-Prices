# -*- coding: utf-8 -*-
"""stockPricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x4GXGxw-rxY1Wv1LirxZryfFwOVfmmlB

**Stock Price Prediction using Machine Learning**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
import warnings
warnings.filterwarnings('ignore')

# Start by importing dataset
df = pd.read_csv('/content/drive/MyDrive/data/Tesla.csv', sep=',')
df.head(5)

df.info()

df.isna().sum()

splitted = df['Date'].str.split('/', expand=True)

df['day'] = splitted[1].astype('int')
df['month'] = splitted[0].astype('int')
df['year'] = splitted[2].astype('int')

df.head()

df['is_quarter_end'] = np.where(df['month']%3==0,1,0)
df.head()

# We can drop date as non-relevant column
df.drop('Date', axis=1).groupby('is_quarter_end').mean()

plt.figure(figsize=(15,5))
plt.plot(df['Close'])
plt.title('Tesla Close price', fontsize=15)
plt.ylabel('Price in dollars')
plt.show()

df[df['Close'] == df['Adj Close']].shape

# We can drop the Adjusted close price as it is the same as the closing price
df.drop('Adj Close', axis=1, inplace=True)

df['open-close']  = df['Open'] - df['Close']
df['low-high']  = df['Low'] - df['High']
df['target'] = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)

df.sample(10)

plt.pie(df['target'].value_counts().values,
        labels=[0, 1], autopct='%1.1f%%')
plt.show()

features = df[['open-close', 'low-high', 'is_quarter_end']]
target = df['target']

# Apply scaler
scaler = StandardScaler()
features = scaler.fit_transform(features)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
X_train.shape, X_test.shape

from sklearn.linear_model import LogisticRegression
models = [LogisticRegression(), SVC(
  kernel='poly', probability=True), XGBClassifier()]
for model in models:
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f'{model} : ')
    print('Training Accuracy : ', metrics.roc_auc_score(
    y_train, model.predict_proba(X_train)[:,1]))
    print('Validation Accuracy : ', metrics.roc_auc_score(
    y_test, model.predict_proba(X_test)[:,1]))