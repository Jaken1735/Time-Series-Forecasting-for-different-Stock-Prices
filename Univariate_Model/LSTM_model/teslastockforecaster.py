# -*- coding: utf-8 -*-
"""teslaStockForecaster.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QcQmST6WS6PqD8d4iGBeD0IW9nlPZCqY

Stock Price Prediction & Forecasting Using LSTM
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('/content/drive/MyDrive/data/Tesla.csv')
data

# adjusting the date
data['Date'] = pd.to_datetime(data['Date'], format='%m/%d/%Y')
data.set_index('Date', inplace=True)
data.head()
data

# We only want to look at the closing price
data = data[['Close']]
data

def df_to_X_y(df, window_size=5):
  X = []
  y = []
  for i in range(len(df)-window_size):
    row = [[a] for a in df[i:i+window_size]]
    X.append(row)
    label = df[i+window_size]
    y.append(label)

  return np.array(X), np.array(y)

X, y = df_to_X_y(data['Close'], window_size=5)
X.shape, y.shape

X_train, y_train = X[:1200], y[:1200]
X_val, y_val = X[1200:1300], y[1200:1300]
X_test, y_test = X[1300:], y[1300:]

# Define the model
from keras.models import Sequential
from keras.layers import LSTM, Dense, InputLayer
from keras.optimizers import Adam
from keras.losses import MeanSquaredError
from keras.metrics import RootMeanSquaredError

model = Sequential()
model.add(InputLayer(input_shape=(5, 1)))
model.add(LSTM(64))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.0005), metrics=[RootMeanSquaredError()])
model.summary()

from keras.callbacks import ModelCheckpoint

checkpoint_path = "model1/model_checkpoint.keras"
# Create a callback that saves the model's weights
cp = ModelCheckpoint(filepath=checkpoint_path, save_best_only=True)

model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=100, callbacks=[cp])

from keras.models import load_model
model = load_model(checkpoint_path)

train_pred = model.predict(X_train).flatten()
train_df = pd.DataFrame({'Actual': y_train, 'Predicted': train_pred})
train_df

plt.figure(figsize=(12, 6))
plt.plot(train_df['Actual'][:1000], label='Actual', color='blue')
plt.plot(train_df['Predicted'][:1000], label='Predicted', color='red')

test_pred = model.predict(X_test).flatten()
test_df = pd.DataFrame({'Actual': y_test, 'Predicted': test_pred})
test_df

plt.figure(figsize=(12, 6))
plt.plot(test_df['Actual'][:200], label='Actual', color='blue')
plt.plot(test_df['Predicted'][:200], label='Predicted', color='red')